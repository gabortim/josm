name: Java CI Build
env:
  junit_platform_version: '1.7.2'
  JAVAFX_VERSION: '17.0.2'
on:
  push:
    branches: [master]

defaults:
  run:
    shell: bash

jobs:
  createrelease:
    name: Create Release
    runs-on: ubuntu-latest
    env:
      LANG: en_US.UTF-8
    outputs:
      josm_revision: ${{ steps.create_revision.outputs.josm_revision }}
      josm_prerelease: ${{ steps.create_revision.outputs.josm_prerelease }}
      josm_release_tag: ${{ steps.create_revision.outputs.josm_release_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 256

      - name: Set revision env variable
        id: create_revision
        # grab josm revision from last git-svn-id
        run: |
          josm_revision="$(git log -1 --grep 'git-svn-id: https://josm.openstreetmap.de/svn/trunk@' --pretty=format:%B | tail -1 | sed -n 's%git-svn-id: https://josm.openstreetmap.de/svn/trunk@\([0-9]*\) [-0-9a-f]*%\1%p')"
          if [[ "$josm_revision" == "$(curl --silent https://josm.openstreetmap.de/tested)" ]]; then
            echo "josm_prerelease=false" >> $GITHUB_ENV
            echo "josm_prerelease=false" >> $GITHUB_OUTPUT
            josm_release_tag=$josm_revision-tested
          else
            echo "josm_prerelease=true" >> $GITHUB_ENV
            echo "josm_prerelease=true" >> $GITHUB_OUTPUT
            josm_release_tag=$josm_revision
          fi
          echo "josm_revision=$josm_revision" >> $GITHUB_ENV
          echo "josm_revision=$josm_revision" >> $GITHUB_OUTPUT
          echo "josm_release_tag=$josm_release_tag" >> $GITHUB_ENV
          echo "josm_release_tag=$josm_release_tag" >> $GITHUB_OUTPUT

  build:
    needs: createrelease
    runs-on: ${{ matrix.os }}
    env:
      LANG: en_US.UTF-8
    strategy:
      fail-fast: false
      matrix:
        # test against latest update of each major Java version, as well as specific updates of LTS versions:
        java: [8]
        os: [ubuntu-latest]
    name: Java ${{ matrix.java }} on ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 256

      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.ivy2/cache/
            ~/work/josm/josm/tools/
          key: ${{ runner.os }}-ivy2-${{ hashFiles('build.xml', 'ivy.xml', 'tools/ivy.xml') }}

      - name: Setup Java ${{ matrix.java }}
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java }}

      - name: Install Ant
        uses: JOSM/JOSMPluginAction/actions/setup-ant@v1

      - name: Build with Ant
        # Calls ant with -Dreleasebuild=true if we're a 'tested' build
        run: |
          if [ "${{ needs.createrelease.outputs.josm_prerelease }}" == "true" ]; then
            ANT="ant"
          else
            ANT="ant -Dreleasebuild=true"
          fi
          $ANT dis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}